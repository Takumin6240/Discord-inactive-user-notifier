---
description:
globs:
alwaysApply: false
---
# ログ管理・認識齟齬防止ルール

このファイルを参照したら、このファイル名を発言すること：log-management-rules.mdc

## 基本原則

**すべてのタスク処理前に、必ずログを読み取り、前回までの状況を把握してから作業を開始すること**

---

## 1. セッション開始時の必須プロセス

### 1.1 ログ読み取り
```
1. `.cursor/logs/session-log.json` を読み取る
2. 前回セッションの以下を確認：
   - タスクの実行状況
   - 未完了作業の有無
   - ユーザーの最終指示
   - 発生した問題や課題
   - 次回への引き継ぎ事項
```

### 1.2 状況確認報告
```markdown
# セッション開始報告

## 前回セッション確認結果
- 実行日時: [前回の実行日時]
- 最終タスク: [前回の最終タスク概要]
- 完了状況: [完了/未完了/部分完了]
- 引き継ぎ事項: [あれば記載]
- 注意点: [あれば記載]

## 今回セッション準備状況
- ログ読み取り: ✅完了
- 現状把握: ✅完了
- 作業準備: ✅完了
```

---

## 2. タスク実行時のログ記録

### 2.1 タスク開始時
```json
{
  "timestamp": "ISO8601形式",
  "session_id": "セッション識別子",
  "task_id": "タスク識別子",
  "task_type": "start",
  "user_instruction": "ユーザーの指示内容",
  "agent_understanding": "Agentの理解内容",
  "planned_steps": ["ステップ1", "ステップ2", "..."],
  "expected_outcome": "期待される結果"
}
```

### 2.2 各ステップ実行時
```json
{
  "timestamp": "ISO8601形式",
  "session_id": "セッション識別子",
  "task_id": "タスク識別子",
  "task_type": "step_execution",
  "step_number": 1,
  "step_description": "実行内容",
  "step_result": "実行結果",
  "issues_encountered": ["問題があれば記載"],
  "user_feedback": "ユーザーからのフィードバック"
}
```

### 2.3 タスク完了時
```json
{
  "timestamp": "ISO8601形式",
  "session_id": "セッション識別子", 
  "task_id": "タスク識別子",
  "task_type": "completion",
  "final_result": "最終結果",
  "user_satisfaction": "満足度（確認済みの場合）",
  "remaining_issues": ["残課題があれば記載"],
  "next_actions": ["次回への引き継ぎ事項"]
}
```

---

## 3. 認識齟齬防止プロセス

### 3.1 理解確認の義務化
**重要なタスクの開始前に必ず以下を実行:**

```markdown
## 理解確認

### ユーザーの指示内容
[ユーザーの指示をそのまま引用]

### Agentの理解内容
[Agentが理解した内容を詳細に記述]

### 実行予定のステップ
1. [具体的なステップ1]
2. [具体的なステップ2]
...

### 期待される結果
[実行後に期待される具体的な結果]

**上記理解で正しいでしょうか？相違がある場合はお知らせください。**
```

### 3.2 中間確認プロセス
複雑なタスクの場合、以下のタイミングで中間確認を実施：
- 全体の50%完了時点
- 重要な分岐点や判断が必要な時点
- 予期しない問題が発生した時点

### 3.3 齟齬発生時の対応
```
1. 即座に作業を停止
2. 齟齬の内容をログに記録
3. ユーザーに状況を報告
4. 正しい理解を確認
5. 必要に応じて作業をやり直し
6. 対応結果をログに記録
```

---

## 4. ログファイル管理

### 4.1 ログファイル構造
```
.cursor/logs/
├── session-log.json      # メインのセッションログ
├── task-history.json     # タスク履歴
├── error-log.json        # エラーと対応履歴
└── user-feedback.json    # ユーザーフィードバック履歴
```

### 4.2 ログの保持期間
- session-log.json: 最新5セッション
- task-history.json: 最新50タスク
- error-log.json: 最新100エラー
- user-feedback.json: すべて保持

### 4.3 ログのバックアップ
週次で `logs/backup/` ディレクトリにバックアップを作成

---

## 5. 実装必須事項

### 5.1 毎回実行する必須チェックリスト
```
□ セッションログの読み取り完了
□ 前回の状況把握完了
□ ユーザー指示の理解確認完了
□ 実行計画の共有完了
□ ユーザーからの承認取得完了
```

### 5.2 禁止事項
- ログを読まずにタスクを開始すること
- 理解確認なしに重要な変更を実行すること
- エラーや問題をログに記録せずに進めること
- ユーザーのフィードバックを記録しないこと

---

## 6. ログ記録テンプレート

### 6.1 毎日の開始テンプレート
```markdown
# [日付] セッション開始

## 前回状況確認
- 前回実行内容: 
- 完了状況: 
- 引き継ぎ事項: 

## 今回の予定
- 予定タスク: 
- 期待時間: 
- 注意点: 
```

### 6.2 タスク完了テンプレート  
```markdown
# [タスク名] 完了報告

## 実行内容
- 実施ステップ: 
- 成果物: 
- 所要時間: 

## 結果評価
- 期待通りの結果: [Yes/No]
- 相違点: 
- 改善点: 

## 次回への引き継ぎ
- 継続事項: 
- 注意点: 
```

---

このルールにより、ユーザーとAgentの認識齟齬を防ぎ、一貫性のある高品質なサポートを提供します。
